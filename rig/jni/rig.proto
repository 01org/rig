package rig;

message Query
{
  required int32 a=1;
}

message TestResult
{
  required int32 a=1;
}

message Color
{
  optional string hex=1;
}

message Device
{
  enum Type { PHONE=1; TABLET=2; ULTRABOOK=3; }
  optional Type type=4;

  optional int32 width=1; //deprecated - real size comes from the hardware
  optional int32 height=2; //deprecated

  optional Color background=3;
}

message Asset
{
  optional sint64 id=1;
  optional string path=2;

  optional uint32 type=3;
  optional bool is_video=5;
  optional bytes data=4;
}

message Vec3
{
  required float x=1;
  required float y=2;
  required float z=3;
}

message Vec4
{
  required float x=1;
  required float y=2;
  required float z=3;
  required float w=4;
}

message Rotation
{
  required float angle=1;
  required float x=2;
  required float y=3;
  required float z=4;
}

//Deprecated
message Texture
{
  optional sint64 asset_id=1;
}

//Deprecated
message NormalMap
{
  optional sint64 asset_id=1;
}

//Deprecated
message AlphaMask
{
  optional sint64 asset_id=1;
}

message Viewport
{
  required float x=1;
  required float y=2;
  required float width=3;
  required float height=4;
}

message OrthoCoords
{
  required float x0=1;
  required float y0=2;
  required float x1=3;
  required float y1=4;
}

enum PropertyType { FLOAT=1;
                    DOUBLE=2;
                    INTEGER=3;
                    ENUM=4;
                    UINT32=5;
                    BOOLEAN=6;
                    OBJECT=7;
                    POINTER=8;
                    QUATERNION=9;
                    COLOR=10;
                    VEC3=11;
                    VEC4=12;
                    TEXT=13;
                    ASSET=14; }

message PropertyValue
{
  optional float float_value=2;
  optional double double_value=3;
  optional sint32 integer_value=4;
  optional int32 enum_value=5;
  optional int32 uint32_value=6;
  optional bool boolean_value=7;
  optional sint64 object_value=8;
  //XXX: we never expect to serialize a pointer
  optional Rotation quaternion_value=9;
  optional Color color_value=10;
  optional Vec3 vec3_value=12;
  optional Vec4 vec4_value=13;

  optional string text_value=14;
  optional sint64 asset_value=15;
}

message Boxed
{
  optional string name=1;
  optional PropertyType type=2;
  optional PropertyValue value=3;
}

message Entity
{
  message Component
    {
      enum Type { LIGHT=1; MATERIAL=2; SHAPE=3; DIAMOND=4; MODEL=5;
          TEXT=6; CAMERA=7; POINTALISM_GRID=8; NINE_SLICE=9; HAIR=10; }

      message Light
        {
          optional Color ambient=1;
          optional Color diffuse=2;
          optional Color specular=3;
        }

      //Deprecated (just rely on boxed properties)
      message Material
        {
          optional Color ambient=1;
          optional Color diffuse=2;
          optional Color specular=3;
          optional float shininess=4;
          optional Texture texture=5;
          optional NormalMap normal_map=6;
          optional AlphaMask alpha_mask=7;
        }

      message Shape
        {
          optional bool shaped=2;
        }

      message Diamond
        {
          optional float size=1;
        }

      message Model
        {
          optional sint64 asset_id=1;
        }

      message Text
        {
          optional string text=1;
          optional string font=2;
          optional Color color=3;
        }

      message Camera
        {
          enum ProjectionMode {
              ORTHOGRAPHIC=1;
              PERSPECTIVE=2;
          }

          optional ProjectionMode projection_mode=1;

          optional float field_of_view=2;

          optional OrthoCoords ortho=3;

          optional Viewport viewport=4;

          optional float zoom=5;

          optional float focal_distance=6;
          optional float depth_of_field=7;

          optional float near_plane=8;
          optional float far_plane=9;

          optional Color background=10;
        }

      message PointalismGrid
        {
          optional float cell_size=1;
          optional float scale=2;
          optional float z=3;
          optional bool lighter=4;
        }

      optional sint64 id=1;
      optional Type type=2;
      optional Light light=3;

      //Deprecated (just use type + boxed properties)
      optional Material material=4;

      optional Shape shape=5;
      optional Diamond diamond=6;
      optional Model model=7;
      optional Text text=8;
      optional Camera camera=9;
      optional PointalismGrid grid=10;

      //introspectable properties...
      repeated Boxed properties=11;
    }

  optional sint64 id=1;
  optional sint64 parent_id=2;
  optional string label=3;
  optional Vec3 position=4;
  optional float scale=5;
  optional Rotation rotation=6;

  //Deprecated (moved to material component)
  optional bool cast_shadow=7;

  repeated Component components=8;
}

message Constant
{
  optional PropertyValue value=1;
}

message Node
{
  optional float t=1;
  optional PropertyValue value=2;
}

message Path
{
  repeated Node nodes=2;
}

message Controller
{
  message Property
    {
      enum Method { CONSTANT=1; PATH=2; C_BINDING=3; }

      optional sint64 object_id=1;
      optional string name=3;

      optional Method method=7;
      optional bool animated=2; //Deprecated my 'method'

      //Animated properties have key values tracked in a path
      optional PropertyType type=4;
      optional Path path=5;
      optional PropertyValue constant=6;

      message Dependency
        {
          optional sint64 object_id=1;
          optional string name=2;
        }

      //Binding properties instead have a list of dependency
      //properties and a C expression to evaluate whenever
      //one of those dependencies changes
      repeated Dependency dependencies=8;
      optional string c_expression=9;
    }

  optional string name=3;
  optional sint64 id=1;
  repeated Property properties=2;

  //introspectable properties...
  repeated Boxed controller_properties=4;
}

message UI
{
  enum Mode { FULL=1; PACKED=2; }
  optional Mode mode=5;

  optional Device device=1;

  repeated Asset assets=2;
  repeated Entity entities=3;
  repeated Controller controllers=4;
}

message LoadResult
{
}

message LoadAssetResult
{
}

service Slave {
  rpc LoadAsset (Asset) returns (LoadAssetResult);
  rpc Load (UI) returns (LoadResult);
  rpc Test (Query) returns (TestResult);
}

message Event
{
  enum Type { POINTER_STATE=1; POINTER_MOVE=2; POINTER_DOWN=3; POINTER_UP=4;
              KEY_UP=5; KEY_DOWN=6; }

  message PointerState
    {
      repeated bool buttons=1;
    }
  message PointerMove
    {
      optional float x=1;
      optional float y=2;
    }
  message PointerDown
    {
      optional uint32 button=1;
    }
  message PointerUp
    {
      optional uint32 button=1;
    }
  message KeyDown
    {
      optional sint32 keysym=1;
    }
  message KeyUp
    {
      optional sint32 keysym=1;
    }

  optional Type type=1;
  optional sfixed64 timestamp=2;
  optional PointerState pointer_state=3;
  optional PointerMove pointer_move=4;
  optional PointerDown pointer_down=5;
  optional PointerUp pointer_up=6;
  optional KeyDown key_down=7;
  optional KeyUp key_up=8;
}

message FrameSetup
{
  //Input events relevant to this new frame...
  repeated Event events=1;

  optional uint64 frame_id=2;

  //Predicted presentation time...
  optional uint64 for=3;
}

message RunFrameAck
{
}

// The simulator service as used from the renderer
service Simulator {
  rpc Load (UI) returns (LoadResult);

  //Note: the simulation is only started by this request.
  //When completed the simulator will issue an UpdateUI request
  //TODO: Add throttling mechanism
  rpc RunFrame (FrameSetup) returns (RunFrameAck);

  rpc Test (Query) returns (TestResult);
}

message PropertyChange
{
  optional sint64 object_id=1;
  optional int32 property_index=2;
  optional PropertyValue value=3;
}

message UIDiff
{
  optional uint64 frame_id=1;
  repeated PropertyChange property_changes=2;
}

message UpdateUIAck
{
}

// The renderer service as used from the simulator
service Renderer {
    rpc UpdateUI (UIDiff) returns (UpdateUIAck);

    rpc Test (Query) returns (TestResult);
}
